#!/usr/bin/python3
import numpy as np
import matplotlib.pyplot as plt
import wave
import struct

class sine:
    def __init__(self, amplitude=16384, frequency=50., phase=0., duration=1., rate=44100):
        self.a = abs(amplitude)
        self.f = frequency # hertz
        self.p = phase * np.pi / 180.0 # radians
        assert duration > 0
        self.d = duration # seconds
        assert rate > 0
        self.r = rate # samples per second
        self.t = np.arange(self.r * self.d) / self.r # time table based on duration and sampling rate
        self.__components = []

    def fundamental(self):
        return self.a * np.sin(2.0 * np.pi * self.f * self.t + self.p)

    def component(self, amplitude, frequency, phase):
        self.__components.append({'amplitude': amplitude, 'frequency': frequency, 'phase': phase * np.pi / 180.0})

    def components(self):
        return [c['amplitude'] * np.sin(2.0 * np.pi * c['frequency'] * self.t + c['phase']) for c in self.__components]

    def time(self):
        return self.t

    def wave(self):
        wave = self.fundamental()
        for c in self.__components:
            component = c['amplitude'] * np.sin(2.0 * np.pi * c['frequency'] * self.t + c['phase'])
            wave = np.add(wave, component)
        return wave

    def rate(self):
        return self.r

signal = sine(amplitude=16384, 
              frequency=50, 
              phase=90, 
              duration=2.0, 
              rate=31250)

# Write signal to file
wavef = wave.open('signal.wav','w')
wavef.setnchannels(1) # mono
wavef.setsampwidth(2) 
wavef.setframerate(signal.rate())

signal.component(2000, 8765, 90)
signal.component(1000, 9234, 0)
signal.component(3000, 10500, 270)
signal.component(4000, 11234, 120)

for sample in signal.wave():
    data = struct.pack('<h', int(sample))
    wavef.writeframesraw( data )

wavef.writeframes(b'')
wavef.close()

# Plot signal
plot1 = plt.subplot(3, 1, 1)
plt.title('Sine with harmonics')
plt.plot(signal.fundamental())
plt.ylabel('Fundamental')

plt.subplot(3, 1, 2, sharex=plot1, sharey=plot1)
#for c in sine.components():
#    plt.plot(c)
plt.ylabel('Harmonic')

plt.subplot(3, 1, 3, sharex=plot1, sharey=plot1)
plt.plot(signal.wave())
plt.ylabel('Combined')

plt.show()


